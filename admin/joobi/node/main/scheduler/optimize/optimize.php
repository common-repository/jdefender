<?php 
/** @copyright Copyright (c) 2007-2017 Joobi. All rights reserved.

* @license GNU GPLv3 */
defined('JOOBI_SECURE') or die('J....');
class Main_Optimize_scheduler extends Scheduler_Parent_class {
	function process() {
				$this->_cleanSesionTable();
				$this->_cleanMessageTable();
		if ( WPref::load( 'PMAIN_NODE_OPTIMIZEDB' ) ) {
						$mainDatabaseC = WClass::get( 'main.database' );
			$mainDatabaseC->optimizeDB();
		}
				if ( WPref::load( 'PMAIN_NODE_CLEARCACHE' ) > 0 ) {
			if ( WPref::load( 'PMAIN_NODE_CLEARCACHE' ) < ( time() - WPref::load( 'PMAIN_NODE_CLEARCACHEFREQ' ) ) ) {
								$cC = WCache::get();
				$cC->resetCache();
				$mainP = WPref::get( 'main.node' );
				$mainP->updatePref( 'clearcachefreq', time() );
				$this->_cleanCaptchaTable();
			}
		} else {
			$this->_cleanCaptchaTable();
		}
				if ( WExtension::exist( 'basket.node' ) || WExtension::exist( 'cart.node' ) ) $this->_cleanBasketTables();
				if ( WExtension::exist( 'catalog.node' ) ) $this->_cleanViewedItems();
				$this->_checkTableSizeLimit();
				$delay = WPref::load( 'PEMAIL_NODE_STATISTICS_INACTIVE' );
		if ( $delay > 6 ) {
						$usersM = WModel::get( 'users' );
			$usersM->where( 'status', '<', 10 );
			$delay = time() - ( $delay * 86400 ); 
			$usersM->where( 'modified', '<', $delay );
			$usersM->where( 'modified', '!=', 0 );
			$usersM->setVal( 'status', 10 );
			$usersM->update();
		}		
				$uploadPath = JOOBI_DS_TEMP . 'uploads';
		$fileC = WGet::folder();
		$fileC->delete( $uploadPath );
		return true;
	}
	private function _checkTableSizeLimit() {
				$libraryTableM = WModel::get( 'library.table' );
		$libraryTableM->makeLJ( 'library.model', 'dbtid' );
		$libraryTableM->where( 'type', '!=', 20 );
		$libraryTableM->whereE( 'publish', 1, 1 );
		$libraryTableM->groupBy( 'dbtid' );
		$tablesA = $libraryTableM->load( 'ol', array( 'dbtid', 'name' ) );
		if ( empty( $tablesA ) ) return true;
		$criticalTablesA = array();
		$libraryColumnsM = WModel::get( 'library.columns' );
				foreach( $tablesA as $table ) {
			$sqlT = WTable::get( $table->dbtid );
			if ( $sqlT->tableExist() ) {
				$count = $sqlT->total();
			} else {
				continue;
			}			
			$pkA = $sqlT->getPKs();
			if ( empty($pkA) ) continue;
			$libraryColumnsM->whereE( 'dbtid', $table->dbtid );
			$libraryColumnsM->whereIn( 'name', $pkA );
			$columnsA = $libraryColumnsM->load( 'ol', array( 'type', 'name' ) );
			if ( empty($columnsA) ) continue;
						$maxSizeNow = 0;
			$columnText = '';
			foreach( $columnsA as $column ) {
				switch( $column->type ) {
					case 1: 
						$maxSize = 255;
						break;
					case 2: 
						$maxSize = 65535;
						break;
					case 3: 
						$maxSize = 16777215;
						break;
					case 4: 
						$maxSize = 4294967295;
						break;
					case 5:
						$maxSize = 18446744073709551615;
						break;
					case 14:
					default:
						$maxSize = 0;
						break;
				}				
				if ( 0 == $maxSize ) continue;
				if ( $maxSizeNow == 0 ) {
					$maxSizeNow = $maxSize;
				} else {
					$maxSizeNow = $maxSizeNow * $maxSize;
				}				
			}			
						if ( empty($maxSizeNow) ) continue;
			$tenPercent = $maxSizeNow * 0.85;
			if ( $count > $tenPercent ) {
								$criticalTablesA[] = $table->name . ' , size : ' . $maxSizeNow . ' current count : ' . $count;
			}			
		}
		if ( !empty($criticalTablesA) ) {
			$mail = WMail::get();
			$subject = 'Database critical status - require action';
			$body = "Hi, \r\n  This is an automatic email generated by your website ( " . JOOBI_SITE . " ) because there is at least one table in your system which is reaching a critical size!";
			$body .= " \r\n  You need to verify the size of the follow table:";
			$body .= " \r\n  " . implode( " \r\n  ", $criticalTablesA );
			$body .= " \r\n  Should you have further question feel free to contact support. ";
			$mail->sendTextAdmin( $subject, $body, false );
		}		
		return true;
	}	
	private function _cleanMessageTable() {
		if ( ! WModel::modelExist( 'main.messagequeue' ) ) return true;
		$delay = time() - 15768000; 		
		$sessionM = WModel::get( 'main.messagequeue' );
		$sessionM->where( 'created', '<',  $delay );
		$sessionM->delete();
		return true;
	}	
	private function _cleanSesionTable() {
		if ( ! WModel::modelExist( 'library.session' ) ) return true;
		$sessionM = WTable::get( 'sesion_node', 'main_userdata', 'sessid' );
		$sessionM->whereE( 'uid', 0 );
		$sessionM->where( 'modified', '<',  time() - 3600 );
		$sessionM->where( 'framework', '!=',  101 );			$sessionM->delete();
		$sessionM = WTable::get( 'sesion_node', 'main_userdata', 'sessid' );
		$delay = time() - ( WTools::timeOut() * 2 ); 		
		$sessionM->where( 'modified', '<',  $delay );
		$sessionM->where( 'framework', '!=',  101 );			$sessionM->delete();
		if ( WExtension::exist( 'mobile.node' ) ) {
						$delay = time() - ( 259200 * 60 );					$sessionM->where( 'modified', '<',  $delay );
			$sessionM->delete();
		}		
		return true;
	}	
	private function _cleanViewedItems() {
		$viewed = WPref::load( 'PCATALOG_NODE_CLEANVIEWEDITEMS' );
		if ( $viewed ) {				$delay = time() - $viewed;				$basketM = WModel::get( 'item.viewed' );
			$basketM->where( 'modified', '<',  $delay );
			$basketM->deleteAll();
			return true;
		}
		return true;
	}		
	private function _cleanBasketTables() {
		if ( WModel::modelExist( 'cart' ) ) {
			$delay = time() - 15120000;				$basketM = WModel::get( 'cart' );
			$basketM->where( 'modified', '<',  $delay );
			$basketM->deleteAll();
			return true;
		}		
		if ( WModel::modelExist( 'basket' ) ) {
			$delay = time() - 15120000;				$basketM = WModel::get( 'basket' );
			$basketM->where( 'modified', '<',  $delay );
			$basketM->deleteAll();
			return true;
		}
		return true;
	}		
	private function _cleanCaptchaTable() {
		if ( ! WModel::modelExist( 'main.captcha' ) ) return true;
		$delay = time() - 1800;			$captchaM = WModel::get( 'main.captcha' );
		$captchaM->where( 'created', '<',  $delay );
		$captchaM->delete();
		return true;
	}
}